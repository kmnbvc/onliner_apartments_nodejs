const app = require('../app');
const db = require('../service/db');
const http = require('http');
const env = process.env;
const OPENSHIFT_SERVICE_NAME = (env.OPENSHIFT_BUILD_NAMESPACE || '').toUpperCase();
const OPENSHIFT_PORT = env[`${OPENSHIFT_SERVICE_NAME}_SERVICE_PORT`];

const port = normalizePort(env.NODE_PORT || OPENSHIFT_PORT || '3000');
const hostname = env.NODE_IP || '0.0.0.0';
app.set('port', port);

const server = http.createServer(app);

db.connect(() => {
    server.listen(port, hostname, () => console.log(`Application worker ${process.pid} started...`));
    server.on('error', onError);
    server.on('listening', onListening);
});

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `${addr.family} port ${addr.port} address ${addr.address}`;
    console.log('Listening on ' + bind);
}
